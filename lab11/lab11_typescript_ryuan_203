Script started on 2022-04-29 14:31:36-04:00
bash-4.4$ uname -a
Linux zeus-1.vse.gmu.edu 4.18.0-348.7.1.el8_5.x86_64 #1 SMP Wed Dec 8 21:51:17 EST 2021 x86_64 x86_64 x86_64 GNU/Linux
bash-4.4$ cat makefile 
#-----------------------------------------------------------------------------
# Lab 11 Makefile
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Choose a compiler and its options
#--------------------------------------------------------------------------
CC   = gcc
OPTS = -O0
DEBUG = -g

#--------------------------------------------------------------------------
# Add the names of the directories (Add them after each ./)
#--------------------------------------------------------------------------
SRCDIR=./src
OBJDIR=./obj
INCDIR=./inc
BINDIR=./bin

#--------------------------------------------------------------------
# Add the rest of the source files. Don't forget to add the '\' character
# to continue the line. You don't need it after the last source file.
# Note: The source directory, $(SRCDIR), needs to be given for each
# individual file. The $(SRCDIR) below shows how it is done for the
# lab11.c file. Also note that there should only be one SRCS= (i.e. don't
# add more of them as you add files).
#--------------------------------------------------------------------
SRCS=$(SRCDIR)/lab11.c \
$(SRCDIR)/Function1.c  \
$(SRCDIR)/Function2.c  \
$(SRCDIR)/Function3.c  \
$(SRCDIR)/Function4.c  \
$(SRCDIR)/Function5.c


#--------------------------------------------------------------------
# You don't need to edit the next few lines. They define other flags
# used in the compilation of the source code
#--------------------------------------------------------------------
INCLUDE = $(addprefix -I,$(INCDIR))
OBJS=$(SRCS:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
CFLAGS   = $(OPTS) $(INCLUDE) $(DEBUG)

#--------------------------------------------------------------------
# Add the name of the executable after the $(BINDIR)/
#--------------------------------------------------------------------
TARGET = $(BINDIR)/lab11

all: $(TARGET)

$(TARGET): $(OBJS) 
	$(CC) $(CFLAGS) -o $@ $(OBJS)


$(OBJS): $(OBJDIR)/%.o : $(SRCDIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

#--------------------------------------------------------------------
# This clean target will remove all the object files, but
# not the executable
#--------------------------------------------------------------------
clean:
	rm -f $(OBJS)

#--------------------------------------------------------------------
# Add a target below named cleanall that will remove the object files
# as well as the executable
#--------------------------------------------------------------------
cleanall:
	rm -f $(OBJS)
	rm -f $(TARGET)
bash-4.4$ cd src
bash-4.4$ ls
Function1.c  Function2.c  Function3.c  Function4.c  Function5.c  lab11.c
bash-4.4$ cd ..
bash-4.4$ cd inc
bash-4.4$ ls
Function1.h  Function2.h  Function3.h  Function4.h  Function5.h  lab11.h
bash-4.4$ cd ..
bash-4.4$ cd bin
bash-4.4$ ls
bash-4.4$ cd[K[Kcd ..
bash-4.4$ cd obj
bash-4.4$ ls
bash-4.4$ cd ..
bash-4.4$ cd lib
bash-4.4$ ls
libLab11.a
bash-4.4$ cd ..
bash-4.4$ ls
bin  inc  lab11_typescript_ryuan_203  lib  makefile  obj  src
bash-4.4$ make
gcc -O0 -I./inc -g -c src/lab11.c -o obj/lab11.o
gcc -O0 -I./inc -g -c src/Function1.c -o obj/Function1.o
gcc -O0 -I./inc -g -c src/Function2.c -o obj/Function2.o
gcc -O0 -I./inc -g -c src/Function3.c -o obj/Function3.o
gcc -O0 -I./inc -g -c src/Function4.c -o obj/Function4.o
gcc -O0 -I./inc -g -c src/Function5.c -o obj/Function5.o
gcc -O0 -I./inc -g -o bin/lab11 ./obj/lab11.o ./obj/Function1.o ./obj/Function2.o ./obj/Function3.o ./obj/Function4.o ./obj/Function5.o
bash-4.4$ cd bin
bash-4.4$ valgrind --leak-check=yes ./lab11
==3345050== Memcheck, a memory error detector
==3345050== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3345050== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
==3345050== Command: ./lab11
==3345050== 
In functin1()...
function1(): i = 0, p[i] = 0
function1(): i = 1, p[i] = 1
function1(): i = 2, p[i] = 2
function1(): i = 3, p[i] = 3
function1(): i = 4, p[i] = 4
function1(): i = 5, p[i] = 5
function1(): i = 6, p[i] = 6
function1(): i = 7, p[i] = 7
function1(): i = 8, p[i] = 8
function1(): i = 9, p[i] = 9
In functin2()...
function2(): i = 0, p[i] = 0
function2(): i = 1, p[i] = 1
function2(): i = 2, p[i] = 2
function2(): i = 3, p[i] = 3
function2(): i = 4, p[i] = 4
function2(): i = 5, p[i] = 5
function2(): i = 6, p[i] = 6
function2(): i = 7, p[i] = 7
function2(): i = 8, p[i] = 8
function2(): i = 9, p[i] = 9
In functin3()...
function3(): i = 0, p[i] = 0
function3(): i = 1, p[i] = 1
function3(): i = 2, p[i] = 2
function3(): i = 3, p[i] = 3
function3(): i = 4, p[i] = 4
function3(): i = 5, p[i] = 5
function3(): i = 6, p[i] = 6
function3(): i = 7, p[i] = 7
function3(): i = 8, p[i] = 8
function3(): i = 9, p[i] = 9
In functin4()...
function4(): i = 0, p[i] = 0
function4(): i = 1, p[i] = 1
function4(): i = 2, p[i] = 2
function4(): i = 3, p[i] = 3
function4(): i = 4, p[i] = 4
function4(): i = 5, p[i] = 5
function4(): i = 6, p[i] = 6
function4(): i = 7, p[i] = 7
function4(): i = 8, p[i] = 8
function4(): i = 9, p[i] = 9
In functin5()...
function5(): i = 0, p[i] = 0
function5(): i = 1, p[i] = 1
function5(): i = 2, p[i] = 2
function5(): i = 3, p[i] = 3
function5(): i = 4, p[i] = 4
function5(): i = 5, p[i] = 5
function5(): i = 6, p[i] = 6
function5(): i = 7, p[i] = 7
function5(): i = 8, p[i] = 8
function5(): i = 9, p[i] = 9
==3345050== 
==3345050== HEAP SUMMARY:
==3345050==     in use at exit: 0 bytes in 0 blocks
==3345050==   total heap usage: 6 allocs, 6 frees, 3,024 bytes allocated
==3345050== 
==3345050== All heap blocks were freed -- no leaks are possible
==3345050== 
==3345050== For lists of detected and suppressed errors, rerun with: -s
==3345050== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
bash-4.4$ cd ..
bash-4.4$ ls
bin  inc  lab11_typescript_ryuan_203  lib  makefile  obj  src
bash-4.4$ gcc -o bin/lab11_from_lib -I./inc src/lab11.c -L./lib -llab11[1Pab11Lab11
bash-4.4$ ./[K[K./bin/lab11_from_lib 
In functin1()...
function1(): i = 0, p[i] = 0
function1(): i = 1, p[i] = 1
function1(): i = 2, p[i] = 2
function1(): i = 3, p[i] = 3
function1(): i = 4, p[i] = 4
function1(): i = 5, p[i] = 5
function1(): i = 6, p[i] = 6
function1(): i = 7, p[i] = 7
function1(): i = 8, p[i] = 8
function1(): i = 9, p[i] = 9
In functin2()...
function2(): i = 0, p[i] = 0
function2(): i = 1, p[i] = 1
function2(): i = 2, p[i] = 2
function2(): i = 3, p[i] = 3
function2(): i = 4, p[i] = 4
function2(): i = 5, p[i] = 5
function2(): i = 6, p[i] = 6
function2(): i = 7, p[i] = 7
function2(): i = 8, p[i] = 8
function2(): i = 9, p[i] = 9
In functin3()...
function3(): i = 0, p[i] = 0
function3(): i = 1, p[i] = 1
function3(): i = 2, p[i] = 2
function3(): i = 3, p[i] = 3
function3(): i = 4, p[i] = 4
function3(): i = 5, p[i] = 5
function3(): i = 6, p[i] = 6
function3(): i = 7, p[i] = 7
function3(): i = 8, p[i] = 8
function3(): i = 9, p[i] = 9
In functin4()...
function4(): i = 0, p[i] = 0
function4(): i = 1, p[i] = 1
function4(): i = 2, p[i] = 2
function4(): i = 3, p[i] = 3
function4(): i = 4, p[i] = 4
function4(): i = 5, p[i] = 5
function4(): i = 6, p[i] = 6
function4(): i = 7, p[i] = 7
function4(): i = 8, p[i] = 8
function4(): i = 9, p[i] = 9
In functin5()...
function5(): i = 0, p[i] = 0
function5(): i = 1, p[i] = 1
function5(): i = 2, p[i] = 2
function5(): i = 3, p[i] = 3
function5(): i = 4, p[i] = 4
function5(): i = 5, p[i] = 5
function5(): i = 6, p[i] = 6
function5(): i = 7, p[i] = 7
function5(): i = 8, p[i] = 8
function5(): i = 9, p[i] = 9
bash-4.4$ xe[K[Kexit
exit

Script done on 2022-04-29 14:36:13-04:00
